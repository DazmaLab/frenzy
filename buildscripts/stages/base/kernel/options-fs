# === filesystems ============================================================

#
# SMB/CIFS requester
# NETSMB enables support for SMB protocol, it requires LIBMCHAIN and LIBICONV
# options.
# NETSMBCRYPTO enables support for encrypted passwords.
options 	NETSMB			#SMB/CIFS requester
options 	NETSMBCRYPTO		#encrypted password support for SMB

# mchain library. It can be either loaded as KLD or compiled into kernel
options 	LIBMCHAIN



#####################################################################
# FILESYSTEM OPTIONS

#
# Only the root, /usr, and /tmp filesystems need be statically
# compiled; everything else will be automatically loaded at mount
# time.  (Exception: the UFS family--- FFS --- cannot
# currently be demand-loaded.)  Some people still prefer to statically
# compile other filesystems as well.
#
# NB: The NULL, PORTAL, UMAP and UNION filesystems are known to be
# buggy, and WILL panic your system if you attempt to do anything with
# them.  They are included here as an incentive for some enterprising
# soul to sit down and fix them.
#

# One of these is mandatory:
options 	FFS			#Fast filesystem
options 	NFSCLIENT		#Network File System client

# The rest are optional:
options 	CD9660			#ISO 9660 filesystem
#options 	FDESCFS			#File descriptor filesystem
options 	HPFS			#OS/2 File system
options 	MSDOSFS			#MS DOS File System (FAT, FAT32)
options 	NFSSERVER		#Network File System server
options 	NTFS			#NT File System
options 	NULLFS			#NULL filesystem
# Broken (depends on NCP):
#options 	NWFS			#NetWare filesystem
#options 	PORTALFS		#Portal filesystem
options 	PROCFS			#Process filesystem (requires PSEUDOFS)
options 	PSEUDOFS		#Pseudo-filesystem framework
options 	PSEUDOFS_TRACE		#Debugging support for PSEUDOFS
options 	SMBFS			#SMB/CIFS filesystem
options 	UDF			#Universal Disk Format
# Broken (seriously (functionally) broken):
#options 	UMAPFS			#UID map filesystem
#options 	UNIONFS			#Union filesystem
# The xFS_ROOT options REQUIRE the associated ``options xFS''
options 	NFS_ROOT		#NFS usable as root device

# Soft updates is a technique for improving filesystem speed and
# making abrupt shutdown less risky.
#
options 	SOFTUPDATES

# Extended attributes allow additional data to be associated with files,
# and is used for ACLs, Capabilities, and MAC labels.
# See src/sys/ufs/ufs/README.extattr for more information.
options 	UFS_EXTATTR
options 	UFS_EXTATTR_AUTOSTART

# Access Control List support for UFS filesystems.  The current ACL
# implementation requires extended attribute support, UFS_EXTATTR,
# for the underlying filesystem.
# See src/sys/ufs/ufs/README.acls for more information.
options 	UFS_ACL

# Directory hashing improves the speed of operations on very large
# directories at the expense of some memory.
options 	UFS_DIRHASH

# Make space in the kernel for a root filesystem on a md device.
# Define to the number of kilobytes to reserve for the filesystem.
#options 	MD_ROOT_SIZE=10

# Make the md device a potential root device, either with preloaded
# images of type mfs_root or md_root.
options 	MD_ROOT

# Disk quotas are supported when this option is enabled.
#options 	QUOTA			#enable disk quotas

# If you are running a machine just as a fileserver for PC and MAC
# users, using SAMBA or Netatalk, you may consider setting this option
# and keeping all those users' directories on a filesystem that is
# mounted with the suiddir option. This gives new files the same
# ownership as the directory (similar to group). It's a security hole
# if you let these users run programs, so confine it to file-servers
# (but it'll save you lots of headaches in those cases). Root owned
# directories are exempt and X bits are cleared. The suid bit must be
# set on the directory as well; see chmod(1) PC owners can't see/set
# ownerships so they keep getting their toes trodden on. This saves
# you all the support calls as the filesystem it's used on will act as
# they expect: "It's my dir so it must be my file".
#
#options 	SUIDDIR

# NFS options:
#options 	NFS_MINATTRTIMO=3	# VREG attrib cache timeout in sec
#options 	NFS_MAXATTRTIMO=60
#options 	NFS_MINDIRATTRTIMO=30	# VDIR attrib cache timeout in sec
#options 	NFS_MAXDIRATTRTIMO=60
#options 	NFS_GATHERDELAY=10	# Default write gather delay (msec)
#options 	NFS_WDELAYHASHSIZ=16	# and with this
#options 	NFS_DEBUG		# Enable NFS Debugging


#
# Add support for the EXT2FS filesystem of Linux fame.  Be a bit
# careful with this - the ext2fs code has a tendency to lag behind
# changes and not be exercised very much, so mounting read/write could
# be dangerous (and even mounting read only could result in panics.)
#
options 	EXT2FS

#
# Add support for the ReiserFS filesystem (used in Linux). Currently,
# this is limited to read-only access.
#
options 	REISERFS


# Cryptographically secure random number generator; /dev/random
device		random

# The system memory devices; /dev/mem, /dev/kmem
device		mem

# Optional character code conversion support with LIBICONV.
# Each option requires their base file system and LIBICONV.
options 	CD9660_ICONV
options 	MSDOSFS_ICONV
options 	NTFS_ICONV
options 	UDF_ICONV

# Experimental support for large MS-DOS filesystems.
#
# WARNING: This uses at least 32 bytes of kernel memory (which is not
# reclaimed until the FS is unmounted) for each file on disk to map
# between the 32-bit inode numbers used by VFS and the 64-bit pseudo-inode
# numbers used internally by msdosfs. This is only safe to use in certain
# controlled situations (e.g. read-only FS with less than 1 million files).
# Since the mappings do not persist across unmounts (or reboots), these
# filesystems are not suitable for exporting through NFS, or any other
# application that requires fixed inode numbers.
options 	MSDOSFS_LARGE

